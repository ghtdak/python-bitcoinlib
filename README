python-bitcoinlib
-----------------

This Python2/3 library provides an easy interface to the bitcoin data
structures and protocol. The approach is low-level and "ground up", with a
focus on providing tools to manipulate the internals of how Bitcoin works.


Requirements
------------

    sudo apt-get install libssl-dev

The RPC interface, bitcoin.rpc, is designed to work with Bitcoin Core v0.9.
Older versions mostly work but there do exist some incompatibilities.


Structure
---------

Everything consensus critical is found in the modules under bitcoin.core. This
rule is followed pretty strictly, for instance chain parameters are split into
consensus critical and non-consensus-critical.

bitcoin.core            - Basic core definitions, datastructures, and
                          (context-independent) validation
bitcoin.core.bignum     - Bignum handling
bitcoin.core.key        - ECC pubkeys
bitcoin.core.script     - Scripts and opcodes
bitcoin.core.scripteval - Script evaluation/verification
bitcoin.core.serialize  - Serialization

In the future the bitcoin.core may use the Satoshi sourcecode directly as a
libary. Non-consensus critical modules include the following:

bitcoin            - Chain selection
bitcoin.base58     - Base58 encoding
bitcoin.bloom      - Bloom filters (incomplete)
bitcoin.net        - Network communication (broken currently)
bitcoin.messages   - Network messages (broken currently)
bitcoin.rpc        - Bitcoin Core RPC interface support
bitcoin.wallet     - Wallet code, currently just CBitcoinAddress

Effort has been made to follow the Satoshi source relatively closely, for
instance Python code and classes that duplicate the functionality of
corresponding Satoshi C++ code uses the same naming conventions: CTransaction,
CBlockHeader, nValue etc. Otherwise Python naming conventions are followed.


Example Code
------------

See examples/ directory. For instance this example creates a transaction
spending a pay-to-script-hash transaction output:

    $ PYTHONPATH=. examples/spend-pay-to-script-hash-txout.py
    01000000012db211b32295f7ca3e9cdd9f3f0ea12bd938f8fc62c372f1147882dea35a197e000000006b483045022100a4dc2dcebc908e7ea791f69cf99b55b28e709f37d6da1a9da79cff511e47192f02206bdb1f1a67ff0715510717852e452a12bea0076388ca72ae523e9998f053185a01210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71ffffffff01a0860100000000001976a91479fbfc3f34e7745860d76137da68f362380c606c88ac00000000


Selecting the chain to use
--------------------------

Do the following:

    import bitcoin
    bitcoin.SelectChain(NAME)

Where NAME is one of 'testnet', 'mainnet', or 'regtest'. The chain currently
selected is a global variable that changes behavior everywhere, just like in
the Satoshi codebase.


Unit tests
----------

Under bitcoin/tests using test data from Bitcoin Core. To run them:

python -m unittest discover
python3 -m unittest discover
